import warnings
import numpy as np
import ctypes
from pixell import enmap, utils
import time as timer

from tod_generator import TOD_Gen
from pathlib import Path
import pickle 

file = Path(__file__)
simpipeline = file.parent.absolute()
pipeline = simpipeline.parent.absolute()
parent = pipeline.parent.absolute()

data_folder = Path(parent / 'data_tground')


class Replace_TOD:
    """ Insert generated TOD generated by TOD_gen
    """

    name = "Leah"
    name_long = "Leah sim"
    run_when_masking = False  # If set to True, this filter will be applied to a local copy of the data before masking.
    has_corr_template = False  # Set to True if the template impacts the correlation matrix and must be corrected (through the "get_corr_template" function).

    def __init__(self, params, omp_num_threads=2):
        self.params = params
        self.omp_num_threads = omp_num_threads


    def run(self, l2):
        # Collect tsys, gain etc from ex l2.Tsys, l2.Gain, l2.az, l2.el
        Gain = l2.Gain
        # l2.Tsys = np.zeros_like(l2.Tsys) + 44
        Tsys = l2.Tsys
        

        time = l2.tod_times_seconds
        
        freq = l2.freqs*1e9#l2.freqs[0]*1e9 #*** 
        
        # print(f'Time 0 is {time[0]} time -1 is {time[-1]}')
        # dt = l2.tod_times_seconds[1] - l2.tod_times_seconds[0]
        # dnu = (l2.freqs[0][1] - l2.freqs[0][0])*1e9
 
        az = l2.az
        el = l2.el 
        # print('STARTING')
        # pointing = {'az':az, 'el':el}
        # with open(f"{pipeline}/pointing.npy", 'wb') as f:
        #         pickle.dump(pointing, f, protocol=4)

        # print(f'Shape of az = {az.shape}, shape of el = {el.shape}')

        # exit()
        tod = np.empty_like(l2.tod) # Only need the shape for generating


        # For the blackbody modelling of ground pickup
        # hk_air_temp = l2.air_temperature
        hk_time = l2.hk_times
        hk_times = (hk_time - hk_time[0])*24*60*60

        #Call tod_gen 

        
        extra_params_dict = {'hk_air_temp':l2.air_temperature, 'hk_time':hk_times, 'scan_start_idx_hk':l2.scan_start_idx_hk, 'scan_stop_idx_hk':l2.scan_stop_idx_hk}
        tod_gen = TOD_Gen(tod, az, el, Gain, Tsys, freq, time, extra_params_dict=extra_params_dict)
       
       
        convolution_files = [ data_folder / 'conv_26GHz_NSIDE256.npy', data_folder / 'conv_30GHz_NSIDE256.npy', data_folder / 'conv_34GHz_NSIDE256.npy',]

        scale = self.params.ground_sim_wn_scale #1/100000
        
        const = self.params.ground_sim_constant
        test_BB = False #If true sets time to constant while keeping the BB model
        
        d_model, G, correlated, Tsys, white_noise, T_rest = tod_gen.get_data_model(tground_files=convolution_files, corr_noise=False, downsampled=False,  scale=scale, constant_ground = const, BB_test = test_BB )
        
        

       
        # use d_model with shape of TOD
        # print(f'tod shape is {l2.tod.shape}')
        if l2.tod.shape != d_model.shape:
            raise ValueError(f'Simulated TOD does not have the same shape as level 2 TOD it is replacing. \n The TOD shape is {l2.tod.shape}')
         
        if not l2.params.float64_mode:
            l2.tod = np.float32(d_model)
        else: 
            l2.tod = d_model

        l2.tofile_dict["T_rest"] = T_rest ###
        
        # l2.tofile_dict['correlated'] = correlated #l2gen doesnt like this one
        # # l2.tofile_dict['Tsys'] = Tsys
        # l2.tofile_dict['white_noise'] = white_noise #l2gen doesnt like this one


        l2.tofile_dict["air_temp"] = l2.air_temperature
        l2.tofile_dict["hk_time"] = l2.hk_times 
        l2.tofile_dict["scan_start_idx_hk"] = l2.scan_start_idx_hk 
        l2.tofile_dict["scan_stop_idx_hk"] = l2.scan_stop_idx_hk
        l2.tofile_dict["scale"] = scale
        l2.tofile_dict["const"] = const
  
  
